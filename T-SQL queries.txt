Create Database
        CREATE DATABASE TestData
        GO

Switch Database
        USE TestData  
        GO 

Create the table
        CREATE TABLE dbo.Products  
        (ProductID int PRIMARY KEY NOT NULL,  
        ProductName varchar(25) NOT NULL,  
        Price money NULL,  
        ProductDescription varchar(max) NULL)  
        GO

Insert data into a table
        -- Standard syntax  
        INSERT dbo.Products (ProductID, ProductName, Price, ProductDescription)  
            VALUES (1, 'Clamp', 12.48, 'Workbench clamp')  
        GO

        -- Changing the order of the columns  
        INSERT dbo.Products (ProductName, ProductID, Price, ProductDescription)  
            VALUES ('Screwdriver', 50, 3.17, 'Flat head')  
        GO

        -- Skipping the column list, but keeping the values in order  
        INSERT dbo.Products  
            VALUES (75, 'Tire Bar', NULL, 'Tool for changing tires.')  
        GO

        -- Dropping the optional dbo and dropping the ProductDescription column  
        INSERT Products (ProductID, ProductName, Price)  
            VALUES (3000, '3 mm Bracket', 0.52)  
        GO  

Update data
        UPDATE dbo.Products  
            SET ProductName = 'Flat Head Screwdriver'  
            WHERE ProductID = 50  
        GO

Read Data from a table
        -- The basic syntax for reading data from a single table  
        SELECT ProductID, ProductName, Price, ProductDescription  
            FROM dbo.Products  
        GO

        -- Returns all columns in the table  
        -- Does not use the optional schema, dbo  
        SELECT * FROM Products  
        GO 

        -- Returns only two of the columns from the table  
        SELECT ProductName, Price  
            FROM dbo.Products  
        GO    

        -- Returns only two of the records in the table  
        SELECT ProductID, ProductName, Price, ProductDescription  
            FROM dbo.Products  
            WHERE ProductID < 60  
        GO

        -- Returns ProductName and the Price including a 7% tax  
        -- Provides the name CustomerPays for the calculated column  
        SELECT ProductName, Price * 1.07 AS CustomerPays  
            FROM dbo.Products  
        GO  

Delete table
        -- Remove all rows from the Products table
        DELETE FROM Products;  
        GO  

Remove Database
        USE MASTER;  
        GO  
        DROP DATABASE TestData;  
        GO   

Joins
        SELECT Products.ProductID, Customers.CustomerName, Products.OrderDate
        FROM Products
        INNER JOIN Customers ON Products.CustomerID = Customers.CustomerID


    (INNER) JOIN: Returns records that have matching values in both tables
    LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
    RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
    FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

Looking for specific using WHERE
        SELECT column1, column2, ...
        FROM table_name
        WHERE condition;

Find data ORDER BY
        SELECT column1, column2, ...
        FROM table_name
        ORDER BY column1, column2, ... ASC|DESC;

ALT TABLE
To add, delete or modify columns in an existing table
        ALTER TABLE table_name
        ADD column_name datatype;

To drop column
        ALTER TABLE table_name
        DROP COLUMN column_name;

Create Primary KEY
        CREATE TABLE Persons (
            ID int NOT NULL PRIMARY KEY,
            LastName varchar(255) NOT NULL,
            FirstName varchar(255),
            Age int
        );

Foreign KEY
        CREATE TABLE Orders (
            OrderID int NOT NULL PRIMARY KEY,
            OrderNumber int NOT NULL,
            PersonID int FOREIGN KEY REFERENCES Persons(PersonID)
        );

        ALTER TABLE Orders
        ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);